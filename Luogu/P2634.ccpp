//#pragma GCC optimize("Ofast,unroll-loops,no-stack-protector,fast-math")
#include<bits/stdc++.h>
//#include<bits/extc++.h>
//using namespace __gnu_pbds;
using namespace std;
#define F first
#define S second
typedef long long ll;
#define REP(i,n) for(register int i=0;i<(n);++i)
#define REP1(i,a,b) for(register int i=(a);i<=(b);++i)
#define em emplace_back
#define mkp make_pair
#define pb push_back
#define ALL(x) (x).begin(),(x).end()
#define pii pair<int,int>
#define pll pair<ll,ll>
#define Rosario ios::sync_with_stdio(0),cin.tie(0),cout.tie(0);
//#define lb(x) (x&-x)

const int z=2e4+5,inf=1e9;
int mx[z],cnt,w[z<<1],sz[z],sum,n,rt,p[z<<1],nxt[z<<1],h[z],ans;
bool vis[z];
void add(int u,int v,int we){
	nxt[++cnt]=h[u];
	h[u]=cnt;
	p[cnt]=v;
	w[cnt]=we;
}
void calrt(int x,int pa){
	sz[x]=1; mx[x]=0;
	for(int i=h[x];i;i=nxt[i])
		if(pa!=p[i]&&!vis[p[i]]){
			calrt(p[i],x);
			sz[x]+=sz[p[i]];
			mx[x]=max(mx[x],sz[p[i]]);
		}
	mx[x]=max(mx[x],sum-mx[x]);
	if(mx[rt]>mx[x]) rt=x;
}
int dd[z],id,dis[z],tg[3];
void caldis(int x,int pa){
	dd[++id]=dis[x];
	for(int i=h[x];i;i=nxt[i])
		if(!vis[p[i]]&&p[i]!=pa)
			dis[p[i]]=(dis[x]+w[i])%3,caldis(p[i],x);
}
void dfs(int x,int pa){
	vis[x]=1;
	for(int i=h[x];i;i=nxt[i])
		if(!vis[p[i]]&&p[i]!=pa){
			dis[p[i]]=w[i]%3;
			caldis(p[i],x);
			REP1(j,1,id){
				if(dd[j]%3==0) ans+=tg[0]+1;
				else ans+=tg[3-dd[j]%3];
			}
			REP1(j,1,id) tg[dd[j]%3]++;
			id=0;
		}
	tg[0]=tg[1]=tg[2]=0;
	for(int i=h[x];i;i=nxt[i])
		if(!vis[p[i]]&&p[i]!=pa){
			sum=sz[p[i]];
			mx[rt=0]=inf;
			calrt(p[i],x);
			calrt(rt,-1);
			dfs(rt,x);
		}
}
signed main(){Rosario
	cin>>n; sum=n;
	for(int x,y,we,i=1;i<n;++i) cin>>x>>y>>we,add(x,y,we),add(y,x,we);
	mx[rt=0]=inf;
	calrt(1,-1);
	calrt(rt,-1);
	dfs(rt,-1);
	ans=ans*2+n; n*=n;
	int gc=__gcd(ans,n);
	cout<<ans/gc<<'/'<<n/gc<<'\n';
	return 0;
}
